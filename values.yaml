kubernetesClusterDomain: cluster.local

nameOverride: ""
fullnameOverride: ""

image:
  repository: ghcr.io/metrico/gigapipe
  tag: v4.0.0-beta

# imagePullSecrets: 
#   nameOverride: ""

imageCredentials: {}
#   registry: registry.cluster.local
#   username: someone
#   password: sillyness
#   email: someone@host.com


replicaCount: 1

service:
  type: ClusterIP
  port: 3100

livenessProbe: 
  httpGet: 
    path: /metrics 
    port: http 
  initialDelaySeconds: 10 # seconds
  periodSeconds: 10 # seconds
readinessProbe: {}

podAnnotations: {}
podLabels: {}

resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

serviceMonitor:
  enabled: false
  # portName: http
  # port: 3100
  # interval: "30s"
  # scheme: "http"
  # path: /metrics
  # type: ClusterIP
  # labels: {}
  # tlsConfig: {}
  # metricRelabelings: []
  # relabelings: []

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: {}
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    #   kubernetes.io/ingress.class: nginx
    #   nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    #   nginx.ingress.kubernetes.io/auth-type: basic
    #   nginx.ingress.kubernetes.io/auth-secret: basic-auth
    #   nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
basicAuthPass: ""
  # needs APR1-MD5 password 
  # example user test, pass test 
  # "test:$apr1$vbY9pP6j$GruYGP/AoYR1RPQN8KshE."
# This envs is used to control gigapipe parameters https://gigapipe.com/docs/config.html#parameters.
env: {}
# CLICKHOUSE_SERVER: localhost #Clickhouse Server address
# CLICKHOUSE_PORT: "9000" #Clickhouse Server port (binary)
# CLICKHOUSE_DB: gigapipe #Clickhouse Database Name
# CLICKHOUSE_AUTH: default #Clickhouse Authentication (user:password)
# CLICKHOUSE_PROTO: tcp #Clickhouse Protocol (tcp, tls)
# CLICKHOUSE_TIMEFIELD: record_datetime #Clickhouse DateTime column for native queries
# CLUSTER_NAME: undefined #Clickhouse Cluster name
# STORAGE_POLICY: undefined #Clickhouse Cluster storage policy
# BULK_MAXAGE: "2000" #Max Age for Bulk Inserts
# BULK_MAXSIZE: "5000" #Max Size for Bulk Inserts
# BULK_MAXCACHE: 50000 #Max Labels in Memory Cache
# LABELS_DAYS: 7 #Max Days before Label rotation
# SAMPLES_DAYS: 7 #Max Days before Timeseries rotation
# MODE: all #all, writer, reader, init_only (init db and exit)

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true


nodeSelector: {}

tolerations: []

affinity: {}
